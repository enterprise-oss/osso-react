import './App.css';

import { IdpGeneratedFields, OssoGeneratedFields, useOssoFields } from '@enterprise-oss/osso';
import Button from '@material-ui/core/Button';
import Card from '@material-ui/core/Card';
import CardContent from '@material-ui/core/CardContent';
import FormControl from '@material-ui/core/FormControl';
import InputLabel from '@material-ui/core/InputLabel';
import MenuItem from '@material-ui/core/MenuItem';
import Select from '@material-ui/core/Select';
import TextField from '@material-ui/core/TextField';
import { DropzoneArea } from 'material-ui-dropzone';
import React, { useState } from 'react';

// Provide a component for text inputs rendered by Osso.
const InputComponent = ({ onChange, label, copyable, ...inputProps }) => (
  <FormControl fullWidth style={{ marginBottom: 20 }}>
    <TextField onChange={(e) => onChange && onChange(e.target.value)} label={label} {...inputProps} />
  </FormControl>
);

// // Provide a component for upload inputs rendered by Osso.
// const UploadComponent = () => (
//   <Upload.Dragger name="files">
//     <p className="ant-upload-drag-icon"></p>
//     <p className="ant-upload-text">Click to choose or drag XML Federated Metadata file</p>
//     <p className="ant-upload-hint">.XML files will be parsed for configuration</p>
//   </Upload.Dragger>
// );

function App() {
  const [step, setStep] = useState(1);
  const [provider, setProvider] = useState('');
  const { providers } = useOssoFields();

  // Normally provided by GraphQL-based Osso hook, data here is mocked.
  // If you've added <OssoProvider> with an Osso deployment URI, you
  // only need to provide an object with an `id` for an identityProvider
  // to <OssoGeneratedFields> - the component will manage it's own state
  // and API calls.
  const identityProvider = {
    id: '2fdb5db6-4fcd-4872-80e2-6c59137370ef',
    service: provider,
    acsUrl: 'http://demo.ossoapp.io/auth/saml/2fdb5db6-4fcd-4872-80e2-6c59137370ef/callback',
  };
  return (
    <div className="App">
      <Card variant="outlined" title={`Step ${step}.`} style={{ width: '100%', marginBottom: 40, overflow: 'visible' }}>
        <CardContent>
          {step === 1 && (
            <>
              <p>First choose the Identity Provider service you or your customer uses for SSO.</p>
              <form style={{ display: 'flex', flexDirection: 'column' }}>
                <FormControl fullWidth>
                  <InputLabel id="demo-simple-select-label">Provider</InputLabel>
                  <Select
                    labelId="demo-simple-select-label"
                    id="demo-simple-select"
                    value={provider}
                    onChange={(event) => console.log(event.target.value) || setProvider(event.target.value)}
                  >
                    {Object.values(providers).map((provider) => (
                      <MenuItem key={provider.value} value={provider.value}>
                        {provider.label}
                      </MenuItem>
                    ))}
                  </Select>
                </FormControl>
                {provider && (
                  <>
                    <p style={{ margin: '40px 0' }}>
                      Based on the chosen provider, details needed to configure your app on your customer&apos;s
                      Identity Provider are shown below. A button to download appropriate documentation in PDF is also
                      provided. The copy in the component adjusts based on the scope of the user you pass to
                      OssoProvider.
                    </p>
                    <OssoGeneratedFields InputComponent={InputComponent} identityProvider={identityProvider} />
                  </>
                )}
                <FormControl>{provider && <Button onClick={() => setStep(2)}>Next Step</Button>}</FormControl>
              </form>
            </>
          )}
          {step === 2 && (
            <>
              <p>
                Once your customer configures your app on their Identity Provider, you need to collect some data
                generated by the IDP, like an x509 cert. When this data is ready, your customer can input it directly or
                provide it to your team to input on an admin page.
              </p>
              <form style={{ display: 'flex', flexDirection: 'column' }}>
                <IdpGeneratedFields
                  ButtonComponent={(props) => (
                    <Button variant="primary" fullWidth {...props}>
                      Submit
                    </Button>
                  )}
                  InputComponent={InputComponent}
                  UploadComponent={DropzoneArea}
                  identityProvider={identityProvider}
                />
                <p>
                  This step will change to match the provider used. Some IDPs support uploading an XML file, while
                  others provide a URL where the XML can be accessed. Manual configuration is supported for all
                  providers.
                </p>
              </form>
            </>
          )}
        </CardContent>
      </Card>
    </div>
  );
}

export default App;
