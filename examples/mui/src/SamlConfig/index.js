import './index.css';

import {
  createIdentityProvider,
  IdpGeneratedFields,
  OssoGeneratedFields,
  useEnterpriseAccount,
  useOssoFields,
} from '@enterprise-oss/osso';
import Button from '@material-ui/core/Button';
import Card from '@material-ui/core/Card';
import CardContent from '@material-ui/core/CardContent';
import FormControl from '@material-ui/core/FormControl';
import InputLabel from '@material-ui/core/InputLabel';
import MenuItem from '@material-ui/core/MenuItem';
import Select from '@material-ui/core/Select';
import TextField from '@material-ui/core/TextField';
import { DropzoneArea } from 'material-ui-dropzone';
import React, { useState } from 'react';

// Provide a component for text inputs rendered by Osso.
const InputComponent = ({ onChange, label, copyable, ...inputProps }) => (
  <FormControl fullWidth style={{ marginBottom: 20 }}>
    <TextField onChange={(e) => onChange && onChange(e.target.value)} label={label} {...inputProps} />
  </FormControl>
);

const UploadComponent = (props) => (
  <DropzoneArea
    onChange={(files) => {
      if (!files.length) return;

      const reader = new FileReader();
      reader.onload = function (event) {
        props.onChange(event.target.result);
      };
      reader.readAsText(files[0]);
    }}
  />
);

function App() {
  const [step, setStep] = useState(1);
  const [provider, setProvider] = useState('');
  const { providers } = useOssoFields();
  const { data } = useEnterpriseAccount('example.com');
  const oauthClientId = data?.enterpriseAccount?.identityProviders?.[0]?.oauthClient?.id;

  const { createProvider, data: idpData } = createIdentityProvider();
  const identityProvider = idpData?.createIdentityProvider?.identityProvider;
  console.log(identityProvider);
  return (
    <div className="App">
      <Card variant="outlined" title={`Step ${step}.`} style={{ width: '100%', marginBottom: 40, overflow: 'visible' }}>
        <CardContent>
          {step === 1 && (
            <>
              <p>First choose the Identity Provider service you or your customer uses for SSO.</p>
              <FormControl fullWidth>
                <InputLabel id="demo-simple-select-label">Provider</InputLabel>
                <Select
                  labelId="demo-simple-select-label"
                  id="demo-simple-select"
                  value={provider}
                  onChange={(event) => setProvider(event.target.value)}
                >
                  {Object.values(providers).map((provider) => (
                    <MenuItem key={provider.value} value={provider.value}>
                      {provider.label}
                    </MenuItem>
                  ))}
                </Select>
              </FormControl>
              {provider && (
                <Button
                  type="button"
                  style={{ marginTop: 24 }}
                  color="primary"
                  onClick={() => {
                    createProvider(data?.enterpriseAccount.id, oauthClientId, provider).then(() => {
                      setStep(2);
                    });
                  }}
                >
                  Next Step
                </Button>
              )}
            </>
          )}
          {step === 2 && (
            <>
              <p>
                After choosing the Identity Provider service your customer uses, you can create an IdentityProvider
                instance in Osso. Osso generates the data that is required for your customer to configure your app in
                their IDP, as well as IDP specific PDF documentation for your customer to follow.
              </p>
              <OssoGeneratedFields
                ButtonComponent={(props) => <Button color="secondary" {...props} />}
                InputComponent={InputComponent}
                identityProvider={identityProvider}
              />

              <p>NB: The download will not work if this example is run in CodeSandbox</p>

              <Button color="primary" onClick={() => setStep(3)}>
                Next Step
              </Button>
            </>
          )}

          {step === 3 && (
            <>
              <p>
                Once your customer configures your app on their Identity Provider, you need to collect some data
                generated by the IDP, like an x509 cert. When this data is ready, your customer can input it directly or
                provide it to your team to input on an admin page.
              </p>
              <p>
                Here is an example metadata file you can use to complete configuration:
                <a
                  href="https://raw.githubusercontent.com/enterprise-oss/osso-react/main/examples/contrib/federated_metadata_example.xml"
                  download="federated_metadata_example.xml"
                  target="_blank"
                  rel="noopener noreferrer"
                >
                  example_federated_metadata.xml
                </a>
              </p>
              <form>
                <IdpGeneratedFields
                  ButtonComponent={(props) => (
                    <Button {...props} color="primary">
                      Submit
                    </Button>
                  )}
                  InputComponent={InputComponent}
                  UploadComponent={UploadComponent}
                  identityProvider={identityProvider}
                />
                <br />
                <p>
                  This step will change to match the provider used. Some IDPs support uploading an XML file, while
                  others provide a URL where the XML can be accessed. Manual configuration is supported for all
                  providers.
                </p>
              </form>
            </>
          )}
        </CardContent>
      </Card>
    </div>
  );
}

export default App;
